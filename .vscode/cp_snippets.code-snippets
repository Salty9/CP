{
  "base": {
    "prefix": "base",
    "body": [
      "#include <bits/stdc++.h>",
      "#include <chrono>",
      "using namespace std;",
      "using namespace std::chrono;",
      "",
      "#ifdef LOCAL_PROJECT",
      "    #include \"debug.hpp\"",
      "#else",
      "    #define dbg(...)",
      "#endif",
      "",
      "#define endl '\\n'",
      "#define pb push_back",
      "#define all(v) v.begin(), v.end()",
      "#define rep(i,a,b) for (int i = a; i < b; i++)",
      "#define revrep(i,a,b) for (int i = a; i >= b; i--)",
      "#define vin(a) for(auto& x: a) cin >> x;",
      "#define uid(a, b) uniform_int_distribution<int>(a, b)(rng)",
      "mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());",
      "",
      "typedef long long ll;",
      "typedef pair<int, int> pii;",
      "typedef pair<ll, ll> pll;",
      "typedef vector<int> vi;",
      "typedef vector<ll> vll;",
      "template<class T> bool ckmin(T& a, T b){ return b < a ? a = b, 1 : 0; }",
      "template<class T> bool ckmax(T& a, T b){ return b > a ? a = b, 1 : 0; }",
      "",
      "",
      "void solve(int tc = 0) {",
      "",
      "}",
      "",
      "int main() {",
      "",
      "#ifdef LOCAL_PROJECT",
      "    auto begin = std::chrono::high_resolution_clock::now();",
      "    freopen(\"input\",\"r\",stdin);",
      "    //freopen(\"a.out\",\"w\",stdout); // console output is better (in most cases)",
      "#endif",
      "",
      "ios_base::sync_with_stdio(false);",
      "cin.tie(NULL); cout.tie(NULL);",
      "",
      "int tc = 1;",
      "cin >> tc;",
      "",
      "for (int t = 0; t < tc; t++) solve(t);",
      "",
      "#ifdef LOCAL_PROJECT",
      "    auto end = std::chrono::high_resolution_clock::now();",
      "    cerr << setprecision(4) << fixed;",
      "    cerr << \"Execution time: \" << std::chrono::duration_cast<std::chrono::duration<double>>(end - begin).count() << \" seconds\" << endl;",
      "#endif",
      "}"
    ],
    "description": "base"
  },
  "mint": {
    "prefix": "mint",
    "body": [
      "template<int MOD, int RT> struct Mint {",
      "\tstatic const int mod = MOD;",
      "\tstatic constexpr Mint rt() { return RT; } // primitive root for FFT",
      "\tint v; explicit operator int() const { return v; } // explicit -> don't silently convert to int",
      "\tMint():v(0) {}",
      "\tMint(ll _v) { v = int((-MOD < _v && _v < MOD) ? _v : _v % MOD);",
      "\t\tif (v < 0) v += MOD; }",
      "\tbool operator==(const Mint& o) const {",
      "\t\treturn v == o.v; }",
      "\tfriend bool operator!=(const Mint& a, const Mint& b) {",
      "\t\treturn !(a == b); }",
      "\tfriend bool operator<(const Mint& a, const Mint& b) {",
      "\t\treturn a.v < b.v; }",
      "\t// friend void re(Mint& a) { ll x; re(x); a = Mint(x); }",
      "\t// friend str ts(Mint a) { return ts(a.v); }",
      "",
      "\tMint& operator+=(const Mint& o) {",
      "\t\tif ((v += o.v) >= MOD) v -= MOD;",
      "\t\treturn *this; }",
      "\tMint& operator-=(const mint& o) {",
      "\t\tif ((v -= o.v) < 0) v += MOD;",
      "\t\treturn *this; }",
      "\tMint& operator*=(const Mint& o) {",
      "\t\tv = int((ll)v*o.v%MOD); return *this; }",
      "\tMint& operator/=(const Mint& o) { return (*this) *= inv(o); }",
      "\tfriend Mint pow(Mint a, ll p) {",
      "\t\tMint ans = 1; assert(p >= 0);",
      "\t\tfor (; p; p /= 2, a *= a) if (p&1) ans *= a;",
      "\t\treturn ans; }",
      "\tfriend Mint inv(const Mint& a) { assert(a.v != 0);",
      "\t\treturn pow(a,MOD-2); }",
      "",
      "\tMint operator-() const { return mint(-v); }",
      "\tMint& operator++() { return *this += 1; }",
      "\tMint& operator--() { return *this -= 1; }",
      "\tfriend Mint operator+(Mint a, const Mint& b) { return a += b; }",
      "\tfriend Mint operator-(Mint a, const Mint& b) { return a -= b; }",
      "\tfriend Mint operator*(Mint a, const Mint& b) { return a *= b; }",
      "\tfriend Mint operator/(Mint a, const Mint& b) { return a /= b; }",
      "};",
      "const int MOD = (int)1e9 + 7; // change accoridngly",
      "using mint = Mint<MOD,5>;"
    ],
    "description": "mint"
  },
  "segtree": {
    "prefix": "segtree",
    "body": [
      "template<class T> struct Segtree {",
      "   // initialize ID if need nonzero & define cmb so that cmb(ID,b) = b",
      "    const T ID{};",
      "    T cmb(T a, T b) {",
      "        return a+b;",
      "    }",
      "    int n; vector<T> seg;",
      "    Segtree(int sz){ init(sz); } // just call init if i pass in size",
      "    Segtree(){} // nothing if i dont pass stuff",
      "    void init(int _n) { // upd, query also work if n = _n",
      "        for (n = 1; n < _n; ) n *= 2;",
      "        seg.assign(2*n,ID); }",
      "    void pull(int p) { seg[p] = cmb(seg[2*p],seg[2*p+1]); }",
      "    void upd(int p, T val) {  // set val at position p [0 idx]",
      "        seg[p += n] = val; for (p /= 2; p; p /= 2) pull(p); }",
      "    T query(int l, int r) {    // zero-indexed, inclusive",
      "        T ra = ID, rb = ID;",
      "        for (l += n, r += n+1; l < r; l /= 2, r /= 2) {",
      "            if (l&1) ra = cmb(ra,seg[l++]);",
      "            if (r&1) rb = cmb(seg[--r],rb);",
      "        }",
      "        return cmb(ra,rb);",
      "    }",
      "    /// int first_at_least(int lo, int val, int ind, int l, int r) { // if seg stores max across range",
      "    ///     if (r < lo || val > seg[ind]) return -1;",
      "    ///     if (l == r) return l;",
      "    ///     int m = (l+r)/2;",
      "    ///     int res = first_at_least(lo,val,2*ind,l,m); if (res != -1) return res;",
      "    ///     return first_at_least(lo,val,2*ind+1,m+1,r);",
      "    /// }",
      "};",
      "// usage: Segtree<int> seg; seg.init(n); if you want to init later",
      "// OR Segtree<int> seg(n);"
    ],
    "description": "segtree"
  },
  "pbds": {
    "prefix": "pbds",
    "body": [
      "#include <bits/extc++.h>",
      "using namespace __gnu_pbds;",
      "",
      "template<class T>",
      "using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;",
      "// Usage: Tree<int> t; order_of_key, find_by_order"
    ],
    "description": "pbds"
  },
  "unionfind": {
    "prefix": "unionfind",
    "body": [
      "struct Dsu {",
      "\tvector<int> p;",
      "\tDsu(int n) : p(n, -1) {}",
      "\tbool sameSet(int a, int b) { return find(a) == find(b); }",
      "\tint size(int x) { return -p[find(x)]; }",
      "\tint find(int x) { return p[x] < 0 ? x : p[x] = find(p[x]); }",
      "\tbool unite(int a, int b) {",
      "\t\ta = find(a), b = find(b);",
      "\t\tif (a == b) return false;",
      "\t\tif (p[a] > p[b]) swap(a, b);",
      "\t\tp[a] += p[b]; p[b] = a;",
      "\t\treturn true;",
      "\t}",
      "};"
    ],
    "description": "unionfind"
  },
  "gp_hash_table": {
    "prefix": "gp_hash_table",
    "body": [
      "#include <ext/pb_ds/assoc_container.hpp>",
      "using namespace __gnu_pbds;",
      "",
      "struct custom_hash {",
      "    static uint64_t splitmix64(uint64_t x) {",
      "        x += 0x9e3779b97f4a7c15;",
      "        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;",
      "        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;",
      "        return x ^ (x >> 31);",
      "    }",
      "",
      "    size_t operator()(uint64_t x) const {",
      "        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();",
      "        return splitmix64(x + FIXED_RANDOM);",
      "    }",
      "};",
      "",
      "template<typename S, typename T>",
      "using hash_table = gp_hash_table<S, T, custom_hash>;",
      "// Usage: hashtable<int, int> for map<int, int> basically",
      "// replacement for unordered_set<K>, use gp_hash_table<K, null_type>",
      "// Note: the operator needs to be able to hash the typename S",
      "",
      "",
      "// untested but could be used for pairs",
      "// the hashes need to be non symmetric ((a, b) and (b, a) should give diff hash)",
      "// eg: splitmix64(x.first ^ splitmix64(x.second) ^ FIXED_RANDOM) works",
      "// but splitmix64(x.first ^ x.second ^ FIXED_RANDOM) doesnt since (1, 2) and (2, 1) give same hash",
      "",
      "// maybe this for pairs",
      "",
      "// size_t operator()(pair<uint64_t, uint64_t> x) const {",
      "// static const uint64_t FIXED_RANDOM =",
      "//     chrono::steady_clock::now().time_since_epoch().count();",
      "//     return splitmix64(x.first ^ splitmix64(x.second) ^ FIXED_RANDOM);",
      "// }",
      "",
      "//maybe this for strings",
      "",
      "// size_t operator()(string x) const {",
      "//   static const uint64_t FIXED_RANDOM =",
      "//       chrono::steady_clock::now().time_since_epoch().count();",
      "//   uint64_t hash = 0;",
      "//   for (char c : x){",
      "//       hash = splitmix64(hash ^ (c + 1) ^ FIXED_RANDOM);",
      "//   }",
      "//   return hash;",
      "// }"
    ],
    "description": "gp_hash_table"
  }
}