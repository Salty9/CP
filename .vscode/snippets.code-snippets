{
	"base_template": {
  "prefix": "base",
  "body": [
    "#include <bits/stdc++.h>",
    "#include <chrono>",
    "using namespace std;",
    "using namespace std::chrono;",
    "",
    "#ifdef LOCAL_PROJECT",
    "    #include \"debug.hpp\"",
    "#else",
    "    #define dbg(...)",
    "#endif",
    "",
    "#define endl '\\n'",
    "#define pb push_back",
    "#define all(v) v.begin(), v.end()",
    "#define rep(i,a,b) for (int i = a; i < b; i++)",
    "#define revrep(i,a,b) for (int i = a; i >= b; i--)",
    "#define vin(a) for(auto& x: a) cin >> x;",
    "#define uid(a, b) uniform_int_distribution<int>(a, b)(rng)",
    "mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());",
    "",
    "typedef long long ll;",
    "typedef pair<int, int> pii;",
    "typedef pair<ll, ll> pll;",
    "typedef vector<int> vi;",
    "typedef vector<ll> vll;",
    "template<class T> bool ckmin(T& a, T b){ return b < a ? a = b, 1 : 0; }",
    "template<class T> bool ckmax(T& a, T b){ return b > a ? a = b, 1 : 0; }",
    "",
    "",
    "void solve(int tc = 0) {",
    "    ",
    "}",
    "",
    "int main() {",
    "",
    "#ifdef LOCAL_PROJECT",
    "    auto begin = std::chrono::high_resolution_clock::now();",
    "    freopen(\"input\",\"r\",stdin);",
    "    //freopen(\"a.out\",\"w\",stdout); // console output is better (in most cases)",
    "#endif",
    "",
    "ios_base::sync_with_stdio(false);",
    "cin.tie(NULL); cout.tie(NULL);",
    "",
    "int tc = 1;",
    "cin >> tc;",
    "",
    "for (int t = 0; t < tc; t++) solve(t);",
    "",
    "#ifdef LOCAL_PROJECT",
    "    auto end = std::chrono::high_resolution_clock::now();",
    "    cerr << setprecision(4) << fixed;",
    "    cerr << \"Execution time: \" << std::chrono::duration_cast<std::chrono::duration<double>>(end - begin).count() << \" seconds\" << endl;",
    "#endif",
    "}"
  ],
  "description": "base_template"
	},

  "modular int": {
  "prefix": "mint",
  "body": [
    "template<int MOD, int RT> struct Mint {",
    "static const int mod = MOD;",
    "static constexpr Mint rt() { return RT; } // primitive root for FFT",
    "    int v; explicit operator int() const { return v; } // explicit -> don't silently convert to int",
    "    Mint():v(0) {}",
    "    Mint(ll _v) { v = int((-MOD < _v && _v < MOD) ? _v : _v % MOD);",
    "       if (v < 0) v += MOD; }",
    "    bool operator==(const Mint& o) const {",
    "       return v == o.v; }",
    "    friend bool operator!=(const Mint& a, const Mint& b) { ",
    "       return !(a == b); }",
    "    friend bool operator<(const Mint& a, const Mint& b) { ",
    "       return a.v < b.v; }",
    "    // friend void re(Mint& a) { ll x; re(x); a = Mint(x); }",
    "    // friend str ts(Mint a) { return ts(a.v); }",
    "   ",
    "    Mint& operator+=(const Mint& o) { if ((v += o.v) >= MOD) v -= MOD; return *this; }",
    "    Mint& operator-=(const mint& o) { if ((v -= o.v) < 0) v += MOD; return *this; }",
    "    Mint& operator*=(const Mint& o) { v = int((ll)v*o.v%MOD); return *this; }",
    "    Mint& operator/=(const Mint& o) { return (*this) *= inv(o); }",
    "    friend Mint pow(Mint a, ll p) {",
    "        Mint ans = 1; assert(p >= 0);",
    "        for (; p; p /= 2, a *= a) if (p&1) ans *= a;",
    "        return ans; }",
    "    friend Mint inv(const Mint& a) { assert(a.v != 0); ",
    "        return pow(a,MOD-2); }",
    "   ",
    "    Mint operator-() const { return mint(-v); }",
    "    Mint& operator++() { return *this += 1; }",
    "    Mint& operator--() { return *this -= 1; }",
    "    friend Mint operator+(Mint a, const Mint& b) { return a += b; }",
    "    friend Mint operator-(Mint a, const Mint& b) { return a -= b; }",
    "    friend Mint operator*(Mint a, const Mint& b) { return a *= b; }",
    "    friend Mint operator/(Mint a, const Mint& b) { return a /= b; }",
    "};",
    "const int MOD = (int)1e9 + 7; // change accoridngly",
    "using mint = Mint<MOD,5>;"
  ],
    "description": "modular int"
    },

  "Policy based ds": {
  "prefix": "pbds",
  "body": [
    "#include <bits/extc++.h>",
    "using namespace __gnu_pbds;",
    "",
    "template<class T>",
    "using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;",
    "// Usage: Tree<int> t; order_of_key, find_by_order",
    ""
  ],
	"description": "Policy based ds"
    },

	"gp_hash_table": {
  "prefix": "gp_hash",
  "body": [
    "#include <ext/pb_ds/assoc_container.hpp> ",
    "using namespace __gnu_pbds;",
    "  ",
    "struct custom_hash {",
    "    static uint64_t splitmix64(uint64_t x) {",
    "        x += 0x9e3779b97f4a7c15;",
    "        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;",
    "        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;",
    "        return x ^ (x >> 31);",
    "    }",
    " ",
    "    size_t operator()(uint64_t x) const {",
    "        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();",
    "        return splitmix64(x + FIXED_RANDOM);",
    "    }",
    "};",
    " ",
    "template<typename S, typename T>",
    "using hash_table = gp_hash_table<S, T, custom_hash>;",
    "// Usage: hashtable<int, int> for map<int, int> basically",
    "// replacement for unordered_set<K>, use gp_hash_table<K, null_type>",
    "// Note: the operator needs to be able to hash the typename S"
  ],
  "description": "gp_hash_table"
	},


	"segment tree": {
  "prefix": "segtree",
  "body": [
    "template<class T> struct Segtree {",
    "   // initialize ID if need nonzero & define cmb so that cmb(ID,b) = b",
    "    const T ID{};",
    "    T cmb(T a, T b) {",
    "        return a+b; ",
    "    } ",
    "    int n; vector<T> seg;",
    "    Segtree(int sz){ init(sz); } // just call init if i pass in size ",
    "    Segtree(){} // nothing if i dont pass stuff",
    "    void init(int _n) { // upd, query also work if n = _n",
    "        for (n = 1; n < _n; ) n *= 2; ",
    "        seg.assign(2*n,ID); }",
    "    void pull(int p) { seg[p] = cmb(seg[2*p],seg[2*p+1]); }",
    "    void upd(int p, T val) {  // set val at position p [0 idx]",
    "        seg[p += n] = val; for (p /= 2; p; p /= 2) pull(p); }",
    "    T query(int l, int r) {    // zero-indexed, inclusive",
    "        T ra = ID, rb = ID;",
    "        for (l += n, r += n+1; l < r; l /= 2, r /= 2) {",
    "            if (l&1) ra = cmb(ra,seg[l++]);",
    "            if (r&1) rb = cmb(seg[--r],rb);",
    "        }",
    "        return cmb(ra,rb);",
    "    }",
    "    /// int first_at_least(int lo, int val, int ind, int l, int r) { // if seg stores max across range",
    "    ///     if (r < lo || val > seg[ind]) return -1;",
    "    ///     if (l == r) return l;",
    "    ///     int m = (l+r)/2;",
    "    ///     int res = first_at_least(lo,val,2*ind,l,m); if (res != -1) return res;",
    "    ///     return first_at_least(lo,val,2*ind+1,m+1,r);",
    "    /// }",
    "};",
    "// usage: Segtree<int> seg; seg.init(n); if you want to init later",
    "// OR Segtree<int> seg(n);"
  ],
  "description": "segment tree" 
	},

	"DSU": {
  "prefix": "dsu",
  "body": [
    "struct Dsu {",
    "    vector<int> p;",
    "    Dsu(int n) : p(n, -1) {}",
    "    bool sameSet(int a, int b) { return find(a) == find(b); }",
    "    int size(int x) { return -p[find(x)]; }",
    "    int find(int x) { return p[x] < 0 ? x : p[x] = find(p[x]); }",
    "    bool unite(int a, int b) {",
    "        a = find(a), b = find(b);",
    "        if (a == b) return false;",
    "        if (p[a] > p[b]) swap(a, b);",
    "        p[a] += p[b]; p[b] = a;",
    "        return true;",
    "    }",
    "};"
  ],
  "description": "DSU"
	}
	
}